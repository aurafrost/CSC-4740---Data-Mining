contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
head(var.contrib[])
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- res.pca$rotation
sdev <- res.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
#cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
head(var.contrib[])
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
#cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
head(var.contrib[])
table<-head(var.contrib[])
View(table)
eigenData<-(data.pca$sdev)^2
eigenData
options("scipen"=100, digits = 4)
eigenData
eigenData<-get_eigenvalue(data.pca)
eigenData
table
eigenData
eigenData<-(data.pca$sdev)^2
eigenData
fviz_screeplot(data.pca, ncp=14, choice="eigenvalue")
data.pca<-prcomp(data[2:14]) # principal component analysis
data.pca<-prcomp(data[2:14]) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
# cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot
data.pca
data.pca<-prcomp(data[3:14]) # principal component analysis
data[2]
data<-read.csv("Wine.csv", header=FALSE, col.names=c
("Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data<-read.csv("Wine.csv", header=FALSE, col.names=c
("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
col.names=c
("Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
col.names=c
("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data.pca<-prcomp(data[3:14]) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
# cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlo
sPlot
table
data.pca<-prcomp(data) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
# cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot
options("scipen"=100, digits = 5)
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
col.names=c
("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
var
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
# col.names=c
# ("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
#   "Total phenols","Flavanoids","Nonflavanoid phenols",
#   "Proanthocyanins","Color intensity","Hue",
#   "OD280/OD315 of diluted wines","Proline"))
data.pca<-prcomp(data) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
# cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
# Answer for Part 9
#
# Outputs (I removed scientific notation. Not sure if we were supposed to do that,
# but it looks better in my opinion.)
# PCs vs Attributes Table
# PC1        PC2      PC3       PC4       PC5        PC6        PC7
# X1     0.000240635  0.0009950  1.01152  2.179337  4.770392  2.8869523  3.3081371
# X14.23 0.000271063  0.0000515  0.03947  1.869788  0.206290  3.9785220 79.1788200
# X1.71  0.000045361  0.0006277  1.54955  2.453945 28.405015 64.2285398  2.1060231
# X2.43  0.000003798  0.0021821  0.26430  0.014704  0.064693  0.1736542  0.2628042
# X15.6  0.002141050  0.0825801 86.07380 12.817703  0.462753  0.0607862  0.1221991
# X127   0.030525380 99.8549725  0.10509  0.002046  0.003429  0.0000959  0.0006247
# PC8       PC9        PC10       PC11       PC12       PC13      PC14
# X1      3.621457 3.3754906 25.52336018 38.2151604 13.9564060 0.90814644 0.2424052
# X14.23 12.643854 0.7580445  0.33876481  0.8174089  0.1447737 0.00205046 0.0218956
# X1.71   0.572932 0.0140082  0.11578003  0.0059129  0.1311943 0.40092288 0.0155085
# X2.43   2.234794 0.5379616  1.20419960 13.3544281 78.5528164 0.76399555 2.5694609
# X15.6   0.012751 0.0006925  0.00982758  0.0010647  0.3536789 0.00001296 0.0000141
# X127    0.001181 0.0004388  0.00009731  0.0003215  0.0006029 0.00002405 0.0005486
# Eigenvalues
# [1] 99185.828531   170.863581     9.526918     5.129392     1.289797     0.871510
# [7]     0.286616     0.155909     0.111652     0.086786     0.046344     0.034948
# [13]     0.020879     0.008089
sPlot
data.pca
var
table
eigenData
eigenData<-(data.pca$sdev)^2
eigenData
data.pca$sdev
data.pca<-prcomp(data) # principal component analysis
data.pca$sdev
data.pca
eigenValues
eigenData
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
col.names=c
("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data.pca<-prcomp(data) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
# cos2
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
# Answer for Part 9
#
sPlot<-fviz_screeplot(data.pca, choice="eigenvalue")
sPlot
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue",
title(main="Eigenvalue for the Principal Components"),
xlab("Principal Components"))
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue",
title="Eigenvalue for the Principal Components",
xlab("Principal Components"))
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue",
title("Eigenvalue for the Principal Components"),
xlab("Principal Components"))
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue",
sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue"))
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
sPlot
# Jimmy Tran
# 0395
# Data Mining CSC 4740
# import and require factoextra library
library("factoextra")
require("factoextra")
options("scipen"=100, digits = 4) #remove scientific notation
# data imports and pca
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA),
col.names=c
("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
"Total phenols","Flavanoids","Nonflavanoid phenols",
"Proanthocyanins","Color intensity","Hue",
"OD280/OD315 of diluted wines","Proline"))
data.pca<-prcomp(data) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
# Outputs (I removed scientific notation. Not sure if we were supposed to do that,
# but it looks better in my opinion.)
# PCs vs Attributes Table
# PC1        PC2      PC3       PC4       PC5        PC6        PC7
# X1     0.000240635  0.0009950  1.01152  2.179337  4.770392  2.8869523  3.3081371
# X14.23 0.000271063  0.0000515  0.03947  1.869788  0.206290  3.9785220 79.1788200
# X1.71  0.000045361  0.0006277  1.54955  2.453945 28.405015 64.2285398  2.1060231
# X2.43  0.000003798  0.0021821  0.26430  0.014704  0.064693  0.1736542  0.2628042
# X15.6  0.002141050  0.0825801 86.07380 12.817703  0.462753  0.0607862  0.1221991
# X127   0.030525380 99.8549725  0.10509  0.002046  0.003429  0.0000959  0.0006247
# PC8       PC9        PC10       PC11       PC12       PC13      PC14
# X1      3.621457 3.3754906 25.52336018 38.2151604 13.9564060 0.90814644 0.2424052
# X14.23 12.643854 0.7580445  0.33876481  0.8174089  0.1447737 0.00205046 0.0218956
# X1.71   0.572932 0.0140082  0.11578003  0.0059129  0.1311943 0.40092288 0.0155085
# X2.43   2.234794 0.5379616  1.20419960 13.3544281 78.5528164 0.76399555 2.5694609
# X15.6   0.012751 0.0006925  0.00982758  0.0010647  0.3536789 0.00001296 0.0000141
# X127    0.001181 0.0004388  0.00009731  0.0003215  0.0006029 0.00002405 0.0005486
# Eigenvalues
# [1] 99185.828531   170.863581     9.526918     5.129392     1.289797     0.871510
# [7]     0.286616     0.155909     0.111652     0.086786     0.046344     0.034948
# [13]     0.020879     0.008089
# Answer for Part 9
# Not sure if I'm to blame, but the plot looks pretty skewed. Like a lot skewed.
# I'll just keep the data and answer with it instead of ignoring the data.
# Based off the data, I would remove the first 5 principal components
# since they have eigenvalues above 1. The first 4 columns being especially noticeable.
# I would keep the remaining ones as they are within the 0 to 1 range and
# accurately represent the variance of each respective principal component.
table
View(table)
View(data)
data.active<-data[1:13]
data.active
View(data.active)
data.pca<-prcomp(data.active, scale=TRUE) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
# Outputs (I removed scientific notation. Not sure if we were supposed to do that,
# but it looks better in my opinion.)
# PCs vs Attributes Table
# PC1        PC2      PC3       PC4       PC5        PC6        PC7
# X1     0.000240635  0.0009950  1.01152  2.179337  4.770392  2.8869523  3.3081371
# X14.23 0.000271063  0.0000515  0.03947  1.869788  0.206290  3.9785220 79.1788200
# X1.71  0.000045361  0.0006277  1.54955  2.453945 28.405015 64.2285398  2.1060231
# X2.43  0.000003798  0.0021821  0.26430  0.014704  0.064693  0.1736542  0.2628042
# X15.6  0.002141050  0.0825801 86.07380 12.817703  0.462753  0.0607862  0.1221991
# X127   0.030525380 99.8549725  0.10509  0.002046  0.003429  0.0000959  0.0006247
# PC8       PC9        PC10       PC11       PC12       PC13      PC14
# X1      3.621457 3.3754906 25.52336018 38.2151604 13.9564060 0.90814644 0.2424052
# X14.23 12.643854 0.7580445  0.33876481  0.8174089  0.1447737 0.00205046 0.0218956
# X1.71   0.572932 0.0140082  0.11578003  0.0059129  0.1311943 0.40092288 0.0155085
# X2.43   2.234794 0.5379616  1.20419960 13.3544281 78.5528164 0.76399555 2.5694609
# X15.6   0.012751 0.0006925  0.00982758  0.0010647  0.3536789 0.00001296 0.0000141
# X127    0.001181 0.0004388  0.00009731  0.0003215  0.0006029 0.00002405 0.0005486
# Eigenvalues
# [1] 99185.828531   170.863581     9.526918     5.129392     1.289797     0.871510
# [7]     0.286616     0.155909     0.111652     0.086786     0.046344     0.034948
# [13]     0.020879     0.008089
# Answer for Part 9
# Not sure if I'm to blame, but the plot looks pretty skewed. Like a lot skewed.
# I'll just keep the data and answer with it instead of ignoring the data.
# Based off the data, I would remove the first 5 principal components
# since they have eigenvalues above 1. The first 4 columns being especially noticeable.
# I would keep the remaining ones as they are within the 0 to 1 range and
# accurately represent the variance of each respective principal component.
data.pca<-prcomp(data, scale=TRUE) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
# Outputs (I removed scientific notation. Not sure if we were supposed to do that,
# but it looks better in my opinion.)
# PCs vs Attributes Table
# PC1        PC2      PC3       PC4       PC5        PC6        PC7
# X1     0.000240635  0.0009950  1.01152  2.179337  4.770392  2.8869523  3.3081371
# X14.23 0.000271063  0.0000515  0.03947  1.869788  0.206290  3.9785220 79.1788200
# X1.71  0.000045361  0.0006277  1.54955  2.453945 28.405015 64.2285398  2.1060231
# X2.43  0.000003798  0.0021821  0.26430  0.014704  0.064693  0.1736542  0.2628042
# X15.6  0.002141050  0.0825801 86.07380 12.817703  0.462753  0.0607862  0.1221991
# X127   0.030525380 99.8549725  0.10509  0.002046  0.003429  0.0000959  0.0006247
# PC8       PC9        PC10       PC11       PC12       PC13      PC14
# X1      3.621457 3.3754906 25.52336018 38.2151604 13.9564060 0.90814644 0.2424052
# X14.23 12.643854 0.7580445  0.33876481  0.8174089  0.1447737 0.00205046 0.0218956
# X1.71   0.572932 0.0140082  0.11578003  0.0059129  0.1311943 0.40092288 0.0155085
# X2.43   2.234794 0.5379616  1.20419960 13.3544281 78.5528164 0.76399555 2.5694609
# X15.6   0.012751 0.0006925  0.00982758  0.0010647  0.3536789 0.00001296 0.0000141
# X127    0.001181 0.0004388  0.00009731  0.0003215  0.0006029 0.00002405 0.0005486
# Eigenvalues
# [1] 99185.828531   170.863581     9.526918     5.129392     1.289797     0.871510
# [7]     0.286616     0.155909     0.111652     0.086786     0.046344     0.034948
# [13]     0.020879     0.008089
# Answer for Part 9
# Not sure if I'm to blame, but the plot looks pretty skewed. Like a lot skewed.
# I'll just keep the data and answer with it instead of ignoring the data.
# Based off the data, I would remove the first 5 principal components
# since they have eigenvalues above 1. The first 4 columns being especially noticeable.
# I would keep the remaining ones as they are within the 0 to 1 range and
# accurately represent the variance of each respective principal component.
table
data<-read.csv("Wine.csv", header=FALSE,
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
# col.names=c
# ("NULL","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium",
#   "Total phenols","Flavanoids","Nonflavanoid phenols",
#   "Proanthocyanins","Color intensity","Hue",
#   "OD280/OD315 of diluted wines","Proline"))
data.pca<-prcomp(data, scale=TRUE) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
table
eigenData
sPlot
data<-read.csv("Wine.csv",
colClasses=c("NULL",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA))
data.pca<-prcomp(data, scale=TRUE) # principal component analysis
var<-get_pca_var(data.pca) # extract variable results
# table of pcs (Principal components) vs attributes
# Helper function :
# Correlation between variables and principal components
var_cor_func <- function(var.loadings, comp.sdev){
var.loadings*comp.sdev
}
loadings <- data.pca$rotation
sdev <- data.pca$sdev
var.coord <- var.cor <- t(apply(loadings, 1, var_cor_func, sdev))
var.cos2 <- var.coord^2
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
table<-head(var.contrib[])
# get eigenvalues
eigenData<-(data.pca$sdev)^2
# scree plot for the 13 pcs
sPlot<-fviz_screeplot(data.pca, ncp=13, choice="eigenvalue")
sPlot<-sPlot + labs(title = "Eigenvalues for the Principal Components",
x = "Principal Components", y = "Eigenvalue")
# Outputs (I removed scientific notation. Not sure if we were supposed to do that,
# but it looks better in my opinion.)
# PCs vs Attributes Table
# (I get the feeling this is wrong since my labels are on the other axis...)
#                          PC1      PC2     PC3      PC4    PC5     PC6      PC7
# Alcohol            2.0830974 23.39188  4.3008  0.03188  7.058  4.5599  0.31805
# Malic.acid         6.0116950  5.05939  0.7923 28.82512  0.124 28.8169 17.68404
# Ash                0.0004207  9.98995 39.2156  4.58712  2.046  2.3862  2.22519
# Alcalinity.of.ash  5.7274256  0.01122 37.4642  0.37039  0.437  1.0166  8.23513
# Magnesium          2.0161740  8.97805  1.7097 12.37608 52.860  0.1455 10.42536
# Total.phenols     15.5757183  0.42301  2.1368  3.92311  2.230  0.7077  0.07798
#                       PC8     PC9     PC10    PC11   PC12     PC13
# Alcohol           15.6926 25.8693  4.47766  5.1038 7.0908  0.02241
# Malic.acid         0.4333  0.5668  9.55304  0.5850 1.4810  0.06741
# Ash                2.8988  9.4676  0.07358 24.8693 0.2462  1.99425
# Alcalinity.of.ash 18.3158  4.0180  0.27878 22.9742 0.3107  0.84057
# Magnesium          2.4449  7.3659  0.46064  0.5082 0.3871  0.32233
# Total.phenols     16.4782  8.1816 10.24841  9.2624 9.2345 21.52106
# Eigenvalues
# [1] 4.7059 2.4970 1.4461 0.9190 0.8532 0.6417 0.5510 0.3485 0.2889 0.2509 0.2258
# [12] 0.1688 0.1034
# Answer for Part 9
# Based off the data, I would remove the first 3 principal components (columns)
# since they have eigenvalues above 1.
# I would keep the remaining ones as they are within the 0 to 1 range and
# accurately represent the variance of each respective principal component.
table
